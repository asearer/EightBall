{"ast":null,"code":"var _jsxFileName = \"/home/asearer/Documents/school/react-8-ball/colorboxes/src/BoxesContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Box from \"./Box\";\nimport \"./BoxesContainer.css\";\nimport { choice, randInt } from \"./random\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultColors = [\"Aqua\", \"Black\", \"BlanchedAlmond\", \"Blue\", \"Chocolate\", \"DodgerBlue\", \"Lavender\", \"LawnGreen\", \"Peru\", \"Plum\", \"SpringGreen\", \"SteelBlue\", \"Tan\", \"Teal\", \"Thistle\", \"Tomato\", \"Turquoise\", \"Violet\", \"Yellow\", \"YellowGreen\"];\n\n/** Container for set of colored boxes.\n *\n * Props:\n * - numBoxes: # of boxes to manage\n * - allColors: array of random colors to choose\n *\n * State:\n * - boxes: array of box color strings\n */\n\nfunction BoxesContainer({\n  allColors = defaultColors,\n  numBoxes = 16\n}) {\n  _s();\n  // note: passes function, so this can be only called once at start\n  const [boxes, setBoxes] = useState(getInitialRandomColors);\n\n  /** Return array of random colors. */\n  function getInitialRandomColors() {\n    return Array.from({\n      length: numBoxes\n    }, () => choice(allColors));\n  }\n\n  /** On button click: pick random box, change to random color. */\n  function handleClick(evt) {\n    setBoxes(boxes => {\n      let idx = randInt(numBoxes);\n      let boxCopy = [...boxes];\n      boxCopy[idx] = choice(allColors);\n      return boxCopy;\n    });\n  }\n  const boxComponents = boxes.map((color, i) => /*#__PURE__*/_jsxDEV(Box, {\n    color: color\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 49\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"BoxesContainer\",\n      children: boxComponents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Change a Box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n_s(BoxesContainer, \"ZA/qIIYucfmwbJpTQ9tfpU6jdmc=\");\n_c = BoxesContainer;\nexport default BoxesContainer;\nvar _c;\n$RefreshReg$(_c, \"BoxesContainer\");","map":{"version":3,"names":["React","useState","Box","choice","randInt","jsxDEV","_jsxDEV","defaultColors","BoxesContainer","allColors","numBoxes","_s","boxes","setBoxes","getInitialRandomColors","Array","from","length","handleClick","evt","idx","boxCopy","boxComponents","map","color","i","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onClick","_c","$RefreshReg$"],"sources":["/home/asearer/Documents/school/react-8-ball/colorboxes/src/BoxesContainer.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Box from \"./Box\";\nimport \"./BoxesContainer.css\";\nimport { choice, randInt } from \"./random\";\n\nconst defaultColors = [\n  \"Aqua\", \"Black\", \"BlanchedAlmond\", \"Blue\", \"Chocolate\", \"DodgerBlue\",\n  \"Lavender\", \"LawnGreen\", \"Peru\", \"Plum\", \"SpringGreen\", \"SteelBlue\", \"Tan\",\n  \"Teal\", \"Thistle\", \"Tomato\", \"Turquoise\", \"Violet\", \"Yellow\", \"YellowGreen\",\n];\n\n/** Container for set of colored boxes.\n *\n * Props:\n * - numBoxes: # of boxes to manage\n * - allColors: array of random colors to choose\n *\n * State:\n * - boxes: array of box color strings\n */\n\nfunction BoxesContainer({ allColors = defaultColors, numBoxes = 16 }) {\n  // note: passes function, so this can be only called once at start\n  const [boxes, setBoxes] = useState(getInitialRandomColors);\n\n  /** Return array of random colors. */\n  function getInitialRandomColors() {\n    return Array.from(\n        { length: numBoxes },\n        () => choice(allColors));\n  }\n\n  /** On button click: pick random box, change to random color. */\n  function handleClick(evt) {\n    setBoxes(boxes => {\n      let idx = randInt(numBoxes);\n      let boxCopy = [...boxes];\n      boxCopy[idx] = choice(allColors);\n      return boxCopy;\n    });\n  }\n\n  const boxComponents = boxes.map((color, i) => <Box key={i} color={color} />);\n\n  return (\n      <div>\n        <section className=\"BoxesContainer\">{boxComponents}</section>\n        <button onClick={handleClick}>Change a Box</button>\n      </div>\n  );\n}\n\n\nexport default BoxesContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,sBAAsB;AAC7B,SAASC,MAAM,EAAEC,OAAO,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,aAAa,GAAG,CACpB,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EACpE,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,KAAK,EAC1E,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,CAC5E;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,cAAcA,CAAC;EAAEC,SAAS,GAAGF,aAAa;EAAEG,QAAQ,GAAG;AAAG,CAAC,EAAE;EAAAC,EAAA;EACpE;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,sBAAsB,CAAC;;EAE1D;EACA,SAASA,sBAAsBA,CAAA,EAAG;IAChC,OAAOC,KAAK,CAACC,IAAI,CACb;MAAEC,MAAM,EAAEP;IAAS,CAAC,EACpB,MAAMP,MAAM,CAACM,SAAS,CAAC,CAAC;EAC9B;;EAEA;EACA,SAASS,WAAWA,CAACC,GAAG,EAAE;IACxBN,QAAQ,CAACD,KAAK,IAAI;MAChB,IAAIQ,GAAG,GAAGhB,OAAO,CAACM,QAAQ,CAAC;MAC3B,IAAIW,OAAO,GAAG,CAAC,GAAGT,KAAK,CAAC;MACxBS,OAAO,CAACD,GAAG,CAAC,GAAGjB,MAAM,CAACM,SAAS,CAAC;MAChC,OAAOY,OAAO;IAChB,CAAC,CAAC;EACJ;EAEA,MAAMC,aAAa,GAAGV,KAAK,CAACW,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,kBAAKnB,OAAA,CAACJ,GAAG;IAASsB,KAAK,EAAEA;EAAM,GAAhBC,CAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC,CAAC;EAE5E,oBACIvB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAASyB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAAER;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC,eAC7DvB,OAAA;MAAQ0B,OAAO,EAAEd,WAAY;MAAAY,QAAA,EAAC;IAAY;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEZ;AAAClB,EAAA,CA7BQH,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAgCvB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}